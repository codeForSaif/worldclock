package lh.worldclockmodule;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import lh.worldclock.WorldClockViewComponent;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which the world clock view.
 *
 * @author Ludovic HOCHET
 * @version $Revision: 1.3 $ $Date: 2006/05/08 22:02:49 $
 */
final class WorldClockTopComponent extends TopComponent
{
    
    private static final long serialVersionUID = 1L;
    
    private static WorldClockTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "lh/worldclockmodule/icon16.png";
    
    private static final String PREFERRED_ID = "WorldClockTopComponent";
    
    private WorldClockViewComponent panel = new WorldClockViewComponent();
    
    private WorldClockTopComponent()
    {
        initComponents();
        
        setName(NbBundle.getMessage(WorldClockTopComponent.class, "CTL_WorldClockTopComponent"));
//        setToolTipText(NbBundle.getMessage(WorldClockTopComponent.class, "HINT_WorldClockTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        javax.swing.JPanel jPanel1;

        jPanel1 = panel;

        setLayout(new java.awt.BorderLayout());

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
        add(jPanel1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized WorldClockTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new WorldClockTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the WorldClockTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized WorldClockTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find WorldClock component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof WorldClockTopComponent)
        {
            return (WorldClockTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened()
    {
    }
    
    public void componentClosed()
    {
    }
    
    public Object writeReplace()
    {
        return new ResolvableHelper();
    }
    
    protected String preferredID()
    {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable
    {
        private static final long serialVersionUID = 1L;
        public Object readResolve()
        {
            return WorldClockTopComponent.getDefault();
        }
    }
    
}
